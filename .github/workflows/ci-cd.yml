name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ created ]

env:
  PYTHON_VERSION: '3.10'

jobs:
  # Job 1: Code Quality Checks
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          pip install black flake8 mypy pylint

      - name: Code formatting check
        run: black --check src/

      - name: Linting
        run: flake8 src/ --max-line-length=100

      - name: Type checking
        run: mypy src/ --ignore-missing-imports

  # Job 2: Unit Tests
  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: quality
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-xdist

      - name: Run unit tests
        run: pytest tests/ -v -n auto --cov=src --cov-report=xml

      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml

  # Job 3: Integration Tests
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install pytest

      - name: Run integration tests
        run: pytest tests/integration/ -v -m "not hardware and not slow"

  # Job 4: Performance Tests
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: integration
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install pytest pytest-benchmark

      - name: Run performance tests
        run: pytest tests/performance/ -v -m "not slow" --benchmark-only

  # Job 5: Build Release Package
  build:
    name: Build Release
    runs-on: ubuntu-latest
    needs: [quality, test, integration]
    if: github.event_name == 'release'
    steps:
      - uses: actions/checkout@v3

      - name: Get version
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Build deployment package
        run: |
          mkdir -p release
          tar -czf release/footballvision-${{ steps.version.outputs.VERSION }}.tar.gz \
            src/ deployment/ monitoring/ docs/ requirements.txt

      - name: Generate checksums
        run: |
          cd release
          sha256sum *.tar.gz > checksums.sha256

      - name: Upload release artifacts
        uses: actions/upload-artifact@v3
        with:
          name: release-package
          path: release/

      - name: Attach to release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            release/*.tar.gz
            release/checksums.sha256

  # Job 6: Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    environment: staging
    steps:
      - uses: actions/checkout@v3

      - name: Deploy to staging environment
        run: |
          echo "Deploying to staging..."
          # Add deployment commands here

  # Job 7: Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'release'
    environment: production
    steps:
      - uses: actions/checkout@v3

      - name: Deploy to production
        run: |
          echo "Deploying to production..."
          # Add production deployment commands here

  # Job 8: Post-Deployment Tests
  smoke-test:
    name: Smoke Tests
    runs-on: ubuntu-latest
    needs: deploy-production
    if: github.event_name == 'release'
    steps:
      - uses: actions/checkout@v3

      - name: Run smoke tests
        run: |
          echo "Running smoke tests..."
          # Add smoke test commands here